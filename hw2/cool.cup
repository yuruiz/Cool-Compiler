/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features dummy_feature_list;
nonterminal Feature feature
nonterminal Formals formals
nonterminal Formal formal
nonterminal Expressions expressions expressions_comma expressions_semi
nonterminal Expression expression

/* Precedence declarations go here. */

program	
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	;

/* Feature list may be empty, but no empty features in list. */
dummy_feature_list
	::= /* empty */
	    {: RESULT = new Features(curr_lineno()); :}
	| feature:f
		{: RESULT = (new Features(curr_lineno())).appendElement(f); :}
	| dummy_feature_list:fs SEMI feature:f
		{: RESULT = fs.appendElement(f); :}
	;
feature
	::= OBJECTID:oId LPAREN formals:fs RPAREN COLON TYPEID:tId LBRACE expressions:exps RBRACE
		{: RESULT = new method(curr_lineno(), oId, fs, tId, exps); :}
	| OBJECTID:oId COLON TYPEID:tId  
		{: RESULT = new attr(curr_lineno(), oId, tId, new no_expr()); :}
	| OBJECTID:oId COLON TYPEID:tId ASSIGN expression:exp
		{: RESULT = new attr(curr_lineno(), oId, tId, exp); :}

formals
	::= /* empty */
		{: RESULT = new Formals(curr_lineno()); :}
	| formal:f
		{: RESULT = (new Formals(curr_lineno()).appendElement(f); :}
	| formals:fs COMMA formal:f
		{: RESULT = fs.appendElement(f); :}

formal 
	::= OBJECTID:oId COLON TYPEID:tId
		{: RESULT = new formal(oId, tId); :}

expressions
	::= expression:exp
		{: RESULT = (new Expressions(curr_lineno())).appendElement(exp); :}
	| expressions:exps expression:exp
		{: RESULT = exps.appendElement(exp); :}

expressions_comma
	::= /* empty */
		{: RESULT = new Expressions(curr_lineno()); :}
	| expression:exp
		{: RESULT = (new Expressions(curr_lineno())).appendElement(exp); :}
	| expressions:exps COMMA expression:exp
		{: RESULT = exps.appendElement(exp); :}

expressions_semi
	::= expression:exp
		{: RESULT = (new Expressions(curr_lineno())).appendElement(exp); :}
	| expressions:exps SEMI expression:exp
		{: RESULT = exps.appendElement(exp); :}

expression
	::= 
	// Assignment
	OBJECTID:oId ASSIGN expression:exp
		{: RESULT = new assign(curr_lineno(), oId, exp); :}

	// Dispatch
	| expression:exp DOT OBJECTID:oId LPAREN expressions_comma:exps RPAREN
		{: RESULT = new dispatch(exp, oId, exps); :} 
	| expression:exp AT TYPEID:tId DOT OBJECTID:oId LPAREN expressions_comma:exps RPAREN
		{: RESULT = new static_dispatch(exp, tId, oId, exps); :}
	| OBJECTID:oId LPAREN expressions_comma RPAREN
		{: RESULT = new dispatch(new no_expr(), oId, exps); :}

	// Condition
	| IF expression:exp1 THEN expression:exp2 ELSE expression:exp3 FI
		{: RESULT = new cond(curr_lineno(), exp1, exp2, exp3); :}

	// Loop
	| WHILE expression:exp1 LOOP exp2 POOL
		{: RESULT = new loop(curr_lineno(), exp1, exp2); :}

	// Block
	| LBRACE expression_semi:exps RBRACE
		{: RESULT = new block(curr_lineno(), exps); :}

	// Let
	| LET 

	// Case
	| case

	// new
	| NEW TYPEID:tId
		{: RPAREN = new new_(curr_lineno(), tId); :}

	// IsVoid
	| ISVOID expression:exp
		{: RESULT = new ISVOID(curr_lineno(), exp); :}

	// Plus
	| expression:exp1 PLUS expression:exp2
		{: RESULT = new plus(curr_lineno(), exp1, exp2); :}

	// Minus
	| expression:exp1 MINUS expression:exp2
		{: RESULT = new sub(curr_lineno(), exp1, exp2); :}

	// Multiply
	| expression:exp1 MULT expression:exp2
		{: RESULT = new mul(curr_lineno(), exp1, exp2); :}

	// Divide
	| expression:exp1 DIV expression:exp2
		{: RESULT = new divide(curr_lineno(), exp1, exp2); :}

	// Negative
	| NEG expression:exp
		{: RESULT = new neg(curr_lineno(), exp); :}

	// Less
	| expression:exp1 LT expression:exp2
		{: RESULT = new lt(curr_lineno(), exp1, exp2); :}

	// Less or Equal
	| expression:exp1 LE expression:exp2
		{: RESULT = new leq(curr_lineno(), exp1, exp2); :}

	// Equal
	| expression:exp1 EQ expression:exp2
		{: RESULT = new eq(curr_lineno(), exp1, exp2); :}

	// Not
	| NOT expression:exp
		{: RESULT = new comp(curr_lineno(), exp); :}

	// List of Expressions
	| LPAREN expression:exp RPAREN
		{: RESULT = exp; :}

	// Object ID
	| OBJECTID:oId
		{: RESULT = new object(curr_lineno(), oId); :}

	// Integer 
	| INT_CONST:int_con
		{: RESULT = new int_const(curr_lineno(), int_con); :}

	// String
	| STR_CONST:str_con
		{: RESULT = new string_const(curr_lineno(), str_con); :}

	// bool
	| BOOL_CONST:val
		{: RESULT = new bool_const(curr_lineno(), val); :}
